{
	VM(虚拟机)
	JVM(Java虚拟机)
	ART(虚拟机)
	Dalvik(虚拟机)
	堆栈机器
	寄存器机
	AOT(提前编译)
	JIT(即时编译|动态翻译|运行时编译)
}

{VM(虚拟机)
	虚拟机(英语:virtual machine),在计算机科学中的体系结构里,是指一种特殊的软件,可以在计算机平台和终端用户之间创建一种环境,而终端用户则是基于虚拟机这个软件所创建的环境来操作其它软件。虚拟机(VM)是计算机系统的仿真器,通过软件模拟具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统,能提供物理计算机的功能。

	有不同种类的虚拟机,每种虚拟机具有不同的功能:

		系统虚拟机(也称为全虚拟化虚拟机)可代替物理计算机。它提供了运行整个操作系统所需的功能。虚拟机监视器(hypervisor)共享和管理硬件,从而允许有相互隔离但存在于同一物理机器上的多个环境。现代虚拟机监视器使用虚拟化专用硬件(主要是主机CPU)来进行硬件辅助虚拟化。
		
		程序虚拟机 被设计用来在与平台无关的环境中执行计算机程序。

	有效的、独立的真实机器的副本。当前包括跟任何真实机器无关的虚拟机


	系统虚拟机
		例如:VirtualBox、VMware Workstation

	程序虚拟机
		例如:JVM(Java虚拟机)

	操作系统层虚拟化
		例如:Docker
}

{JVM(Java虚拟机)
	爪哇虛擬器是一个运行时环境,可以作为一个结果,编制计算机程序,用java编程语言编写的java字节码的执行。

	Java虚拟机(英语:Java Virtual Machine,缩写为JVM),一种能够执行Java bytecode的虚拟机,以堆栈结构机器来进行实做。最早由Sun微系统所研发并实现第一个实现版本,是Java平台的一部分,能够执行以Java语言写作的软件程序。

	Java虚拟机有自己完善的硬体架构,如处理器、堆栈、寄存器等,还具有相应的指令系统。JVM屏蔽了与具体操作系统平台相关的信息,使得Java程序只需生成在Java虚拟机上运行的目标代码(字节码),就可以在多种平台上不加修改地运行。通过对中央处理器(CPU)所执行的软件实现,实现能执行编译过的Java程序码(Applet与应用程序)。
}


大多数虚拟机包括JVM都是一种堆栈机器,而Dalvik虚拟机则是寄存器机。两种架构各有优劣,一般而言,基于堆栈的机器需要更多指令,而基于寄存器的机器指令更长。

{ART(虚拟机)
	Android Runtime(缩写为ART),是一种在Android操作系统上的运行环境,由Google公司研发,并在2013年作为Android 4.4系统中的一项测试功能正式对外发布,在Android 5.0(Android Lollipop)及后续Android版本中作为正式的运行时库取代了以往的Dalvik虚拟机。


	ART能够把应用程序的字节码转换为机器码,是Android所使用的一种新的虚拟机。
	ART采用Ahead-of-time(英语:Ahead-of-time compilation)(AOT)技术。ART同时也改善了性能、垃圾回收(Garbage Collection)、应用程序出错以及性能分析。

	ART 的部分主要功能包括:
		预先 (AOT) 和即时 (JIT) 编译
		优化的垃圾回收 (GC)
		在 Android 9(API 级别 28)及更高版本的系统中,支持将应用软件包中的 Dalvik Executable 格式 (DEX) 文件转换为更紧凑的机器代码。
		更好的调试支持,包括专用采样分析器、详细的诊断异常和崩溃报告,并且能够设置观察点以监控特定字段
}

{Dalvik(虚拟机)
	语言
	Dalvik虚拟机,是Google等厂商合作开发的Android移动设备平台的核心组成部分之一。它可以支持已转换为.dex(即“Dalvik Executable”)格式的Java应用程序的运行。.dex格式是专为Dalvik设计的一种压缩格式,适合内存和处理器速度有限的系统。

	架构
	dx工具是一种用来转换Java class成为DEX格式的工具。多个类被包含在一个dex文件之中。各个类中重复的字符串和其他常量只在DEX中存放一次,以节省空间。Java字节码(bytecode)被转换成Dalvik虚拟机所使用的替代指令集。一个未压缩dex文件通常稍小于一个已经压缩的.jar档。

	安装到行动设备之时,Dalvik可执行档可能会被修改。为了获得进一步优化,虚拟机可能会调整文件内部分数据的端序、内联一些函数和简单的结构体、并短路掉一些不必要的操作。

	当Android启动时,Dalvik VM监视所有的程序(APK),并且创建依存关系树,为每个程序优化代码并存储在Dalvik缓存中。Dalvik第一次加载后会生成Cache文件,以提供下次快速加载,所以第一次会很慢。

	Dalvik解释器采用预先算好的Goto地址,每个指令对内存的访问都在64字节边界上对齐。这样可以节省一个指令后进行查表的时间。为了强化功能, Dalvik还提供了快速翻译器(Fast Interpreter)。

	差异
	Dalvik虚拟机早期并没有使用即时编译(JIT)技术。从Android 2.2开始,Dalvik虚拟机也支持JIT。
	Dalvik虚拟机有自己的字节码,并非使用Java字节码。
	Dalvik基于寄存器,而JVM基于堆栈。
	Dalvik VM透过Zygote进行类别的预加载,Zygote会完成虚拟机的初始化,也是与JVM不同之处。
}

{堆栈机器
	堆栈结构机器(英语:Stack machine),又称堆栈机器,计算机科学中一种计算模型。这种类型的电脑,存储器以堆栈(Stack)存储。

	这种机器,它的指令集中包含了零地址指令("0-operand" instruction set)。硬件在执行运算时,到堆栈的顶端去取出操作数,至运算结束时,再存储到堆栈的顶端。

	相较于累加器(采用 "1-operand instruction set") ,和寄存器机("2-operand instruction set" 或 "3-operand instruction set"),用零地址指令("0-operand instruction set")实现的堆栈机器,它的好处是代码密度(code density)相对较大,因此,它的程序通常较小。
}

{寄存器机
	在数理逻辑和理论计算机科学中,寄存器机(英语:Register machine),又译为暂存器机,是以类似于使用图灵机的方式使用的一类抽象机器。所有模型都是图灵等价的。

	寄存器机得名于它有一个或多个“寄存器”——替代了图灵机的磁带和磁头,这个模型使用了多个唯一寻址的寄存器,每个都持有一个单一正整数。
}

{AOT(提前编译)
	在计算机科学中,提前编译(英语:Ahead-of-time compilation 缩写为AOT 编译)是在执行程序之前(通常是在构建时)将(通常)高级编程语言编译成(通常)低级语言的行为,以减少运行时需要执行的工作量。

	大多数情况下,它与将高级编程语言(如C或C++)或中间表示(如Java 字节码或.NET Framework通用中间语言(CIL) 代码)编译为本机(系统相关)机器代码,以便生成的二进制文件可以本地执行,就像标准的本地编译器一样。在此特定上下文中使用时,它通常被视为与即时(JIT) 编译相反的。

	更一般地说,AOT 编译的目标语言不一定特定于本机机器代码,而是相当随意地定义的。一些学术论文使用这个词来表示将Java 字节码编译为 C的行为或执行优化管道的时间。一个学术项目使用这个词来表示将 JavaScript 预编译为V8(JavaScript 引擎)的机器相关优化IR和JavaScriptCore的机器独立字节码的行为。一些工业语言实现(例如Closure 和 Hermes JavaScript 引擎)使用这个词来表示将源语言预编译为 VM 特定字节码的行为。Angular(Web 框架)使用这个词来表示将其HTML模板和TypeScript转换为JavaScript。

	事实上,由于所有静态编译在技术上都是提前执行的,因此这种特殊的措辞通常用于强调这种预编译行为带来的某种性能优势。因此,将Java编译为Java 字节码的行为很少被称为 AOT,因为它通常是一种要求,而不是一种优化。
}

{JIT(即时编译|动态翻译|运行时编译)
	在计算机技术中,即时编译(英语:just-in-time compilation,缩写为JIT;又译及时编译[1]、实时编译[2]),也称为动态翻译或运行时编译[3],是一种执行计算机代码的方法,这种方法涉及在程序执行过程中(在执行期)而不是在执行之前进行编译。[4]通常,这包括源代码或更常见的字节码到机器码的转换,然后直接执行。实现JIT编译器的系统通常会不断地分析正在执行的代码,并确定代码的某些部分,在这些部分中,编译或重新编译所获得的加速将超过编译该代码的开销。

	JIT编译是两种传统的机器代码翻译方法——提前编译(英语:ahead-of-time compilation)(AOT)和解释——的结合,它结合了两者的优点和缺点。[4]大致来说,JIT编译,以解释器的开销以及编译和链接(解释之外)的开销,结合了编译代码的速度与解释的灵活性。JIT编译是动态编译的一种形式,允许自适应优化(英语:adaptive optimization),比如动态重编译和特定于微架构的加速[nb 1][5]——因此,在理论上,JIT编译比静态编译能够产生更快的执行速度。解释和JIT编译特别适合于动态编程语言,因为运行时系统可以处理后期绑定(英语:Late binding)的数据类型并实施安全保证。
}









